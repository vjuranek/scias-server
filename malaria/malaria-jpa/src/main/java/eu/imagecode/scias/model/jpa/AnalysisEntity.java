package eu.imagecode.scias.model.jpa;

import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Analysis generated by hbm2java
 */
@Entity
@Table(name = "analysis", uniqueConstraints = @UniqueConstraint(columnNames = "result_set_id"))
@NamedQueries ({
    @NamedQuery(name = "AnalysisEntity.findAll", query = "SELECT a FROM AnalysisEntity a"),
    @NamedQuery(name = "AnalysisEntity.findById", query = "SELECT a FROM AnalysisEntity a WHERE a.id = :analysisId")
})
public class AnalysisEntity implements java.io.Serializable {

    private int id;
    private SampleEntity sample;
    private ResultSetEntity resultSet;
    private int localId;
    private Date created;
    private String algorithmVersion;
    private InputDataEntity inputData = new InputDataEntity();
    private StationEntity station;

    public AnalysisEntity() {
    }

    public AnalysisEntity(int id, int localId) {
        this.id = id;
        this.localId = localId;
    }

    public AnalysisEntity(int id, SampleEntity sample, ResultSetEntity resultSet, int localId, Date created,
                    String algorithmVersion, InputDataEntity inputDatas) {
        this.id = id;
        this.sample = sample;
        this.resultSet = resultSet;
        this.localId = localId;
        this.created = created;
        this.algorithmVersion = algorithmVersion;
        this.inputData = inputDatas;
    }

    @Id
    @SequenceGenerator(name = "ANALYSIS_ID_GENERATOR", sequenceName = "ANALYSIS_ID_SEQ")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "ANALYSIS_ID_GENERATOR")
    @Column(name = "id", unique = true, nullable = false)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "sample_id")
    public SampleEntity getSample() {
        return this.sample;
    }

    public void setSample(SampleEntity sample) {
        this.sample = sample;
    }

    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "result_set_id", unique = true)
    public ResultSetEntity getResultSet() {
        return this.resultSet;
    }

    public void setResultSet(ResultSetEntity resultSet) {
        this.resultSet = resultSet;
    }

    @Column(name = "local_id", nullable = false)
    public int getLocalId() {
        return this.localId;
    }

    public void setLocalId(int localId) {
        this.localId = localId;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", length = 29)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "algorithm_version", length = 256)
    public String getAlgorithmVersion() {
        return this.algorithmVersion;
    }

    public void setAlgorithmVersion(String algorithmVersion) {
        this.algorithmVersion = algorithmVersion;
    }

    @OneToOne(cascade = CascadeType.ALL, mappedBy = "analysis")
    public InputDataEntity getInputData() {
        return this.inputData;
    }

    public void setInputData(InputDataEntity inputData) {
        this.inputData = inputData;
    }
    
    @ManyToOne
    @JoinColumn(name = "station_id")
    public StationEntity getStation() {
        return this.station;
    }

    public void setStation(StationEntity station) {
        this.station = station;
    }

}
